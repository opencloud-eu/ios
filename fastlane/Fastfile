# This file contains the fastlane.tools configuration

# update_fastlane # fastlane automatically update itself

default_platform(:ios)

platform :ios do

  desc "Push a new beta build to TestFlight"
   lane :beta do
     ensure_git_status_clean # Ensure that your git status is not dirty
     increment_build_number xcodeproj: "OpenCloud.xcodeproj" # Automatically increase the build number
     commit_version_bump(xcodeproj: "OpenCloud.xcodeproj") # Commit the version bump
     push_to_git_remote # Push the new commit and tag back to git remote
     build_app(scheme: "OpenCloud") # Build scheme
     changelog_from_git_commits # Generate the changelog based on last commits
     upload_to_testflight(skip_waiting_for_build_processing: true) # Upload build to itunesconnnect

  end

  desc "Register new devices to Apple portal"
   lane :register_new_devices do
     register_devices(devices_file: "fastlane/Match/devices.txt") # Sync test devices from file to itunesconnect
     match(force_for_new_devices: true) # Creates all required certificates & provisioning profile
  end

  desc "Ad-Hoc Distribution IPA generation"
   lane :build_ipa_ad_hoc do
    #Create the build
    gym(
      project: "OpenCloud.xcodeproj",
      scheme: "OpenCloud",
      codesigning_identity: "Apple Distribution: OpenCloud GmbH (8P6LQ2M542)",
      export_method: "ad-hoc",
      export_options: {
        method: "ad-hoc",
        provisioningProfiles: {
          "eu.opencloud.ios" => "match AdHoc eu.opencloud.ios",
	        "eu.opencloud.ios.OpenCloud-File-Provider" => "match AdHoc eu.opencloud.ios.OpenCloud-File-Provider",
	        "eu.opencloud.ios.OpenCloud-File-ProviderUI" => "match AdHoc eu.opencloud.ios.OpenCloud-File-ProviderUI",
	        "eu.opencloud.ios.OpenCloud-Intents" => "match AdHoc eu.opencloud.ios.OpenCloud-Intents",
          "eu.opencloud.ios.OpenCloud-Share-Extension" => "match AdHoc eu.opencloud.ios.OpenCloud-Share-Extension",
          "eu.opencloud.ios.OpenCloud-Action-Extension" => "match AdHoc eu.opencloud.ios.OpenCloud-Action-Extension"
          #Add more Provisioning Profiles when extensions are added
        }
      }
    )
  end

  desc "Generate the screenshots for the AppStore"
    lane :screenshots do
      reset_simulators
      snapshot
      frameit(white: false, path: './fastlane/screenshots')
      deliver(
        skip_screenshots: false,
        skip_metadata: true,
        submit_for_review: false,
        ignore_language_directory_validation: true,
        skip_binary_upload: true,
        force: true,
        overwrite_screenshots: true,
        app_identifier: "eu.opencloud.ios",
        skip_app_version_update: true
      )
    end

    desc "Create Metadata Release Notes, Screenshots and push to git"
      lane :prepare_metadata do |options|

        create_release_notes = true
        if options[:create_release_notes] == false
          create_release_notes = options[:create_release_notes]
        end

        create_screenshots = true
        skip_screenshots = false
        if options[:create_screenshots] == false
          create_screenshots = options[:create_screenshots]
          skip_screenshots = true
        end

        output_path = options[:metadata_path]

        # Create Release Notes
        if create_release_notes
          puts("Creating Release Notes…")
          release_notes(
            xcodeproj: "OpenCloud.xcodeproj",
            version_key: "APP_SHORT_VERSION",
            path: "OpenCloud/Release Notes/ReleaseNotes.plist",
            app_name: options[:app_name],
            output_path: output_path
          )
        end

        # Create Screenshots
        if create_screenshots
          puts("Creating Screenshots…")
          reset_simulators
          snapshot
          frameit(white: false, path: './doc/images/')
        end

        # Push Release Notes or Screenshot changes to git
        if create_release_notes || create_screenshots
          puts("Push changes to git…")
          #push_to_git_remote
        end
      end

    desc "Create Release Notes, Screenshots, Build, Upload of regular iOS App and EMM App"
      lane :release_on_appstore do |options|

        # Set options, which action should not performed, by default all actions will be performed
        # Disable all options: fastlane release_on_appstore create_release_notes:false create_screenshots:false deliver:false build_regular_app:false build_emm_app:false

        create_screenshots = true
        skip_screenshots = false
        if options[:create_screenshots] == false
          create_screenshots = options[:create_screenshots]
          skip_screenshots = true
        end

        deliver = true
        if options[:deliver] == false
          deliver = options[:deliver]
        end

        build_regular_app = true
        if options[:build_regular_app] == false
          build_regular_app = options[:build_regular_app]
        end

        build_emm_app = true
        if options[:build_emm_app] == false
          build_emm_app = options[:build_emm_app]
        end

        build_opencloud_online_app = true
        if options[:build_opencloud_online_app] == false
          build_opencloud_online_app = options[:build_opencloud_online_app]
        end

        # Update Bundle IDs and Build App
        if build_regular_app
          puts("Prepare Metadata…")
          # Prepare Metadata
          prepare_metadata(
          	create_release_notes: options[:create_release_notes],
          	create_screenshots: options[:create_screenshots],
          	app_name: "OpenCloud",
          	metadata_path: 'fastlane/metadata/en-US/release_notes.txt'
          )

          puts("Build regular iOS App…")
          # Build App
          opencloud_regular_build()

          # Deliver
          if deliver
            deliver(
              skip_screenshots: skip_screenshots,
              skip_metadata: false,
              metadata_path: "./metadata",
              submit_for_review: false,
              ignore_language_directory_validation: true,
              skip_binary_upload: false,
              force: true,
              overwrite_screenshots: create_screenshots,
              app_identifier: "eu.opencloud.ios",
              skip_app_version_update: true,
              ipa: "OpenCloud-regular.ipa"
            )
          end
        end

        if build_emm_app
          puts("Prepare Metadata…")
          # Prepare Metadata
          prepare_metadata(
          	create_release_notes: options[:create_release_notes],
          	create_screenshots: options[:create_screenshots],
          	app_name: "OpenCloud EMM",
          	metadata_path: 'fastlane/metadata-emm/en-US/release_notes.txt'
          )

          puts("Build EMM iOS App…")
          # Moving all EMM resources to the correct place
          sh "cp -R ../OpenCloud/Resources/Theming/eu.opencloud.ios.emm/*.png ../OpenCloud/Resources/Theming/branding-assets/"

          # Build App
          opencloud_emm_build()

          # Deliver
          if deliver
            deliver(
              skip_screenshots: skip_screenshots,
              skip_metadata: false,
              metadata_path: "./metadata-emm",
              submit_for_review: false,
              ignore_language_directory_validation: true,
              skip_binary_upload: false,
              force: true,
              overwrite_screenshots: create_screenshots,
              app_identifier: "eu.opencloud.ios.emm",
              skip_app_version_update: true,
              ipa: "OpenCloud-emm.ipa"
            )
          end
      end

      if build_opencloud_online_app
          puts("Prepare Metadata…")
          # Prepare Metadata
          prepare_metadata(
          	create_release_notes: options[:create_release_notes],
          	create_screenshots: options[:create_screenshots],
          	app_name: "OpenCloud Online",
          	metadata_path: 'fastlane/metadata-opencloud-online/en-US/release_notes.txt'
          )

        puts("Build OpenCloud Online iOS App…")

        # Moving all OpenCloud.online resources to the correct place
        sh "cp -R  ../OpenCloud/Resources/Theming/online.opencloud.ios-app/*.png ../OpenCloud/Resources/Theming/branding-assets/"
        sh "cp ../OpenCloud/Resources/Theming/online.opencloud.ios-app/Branding.plist ../OpenCloud/Resources/Theming/"
        
        # Build App
        opencloud_online_build()

        # Deliver
        if deliver
          deliver(
            skip_screenshots: skip_screenshots,
            skip_metadata: false,
            metadata_path: "./metadata-opencloud-online",
            submit_for_review: false,
            ignore_language_directory_validation: true,
            skip_binary_upload: false,
            force: true,
            overwrite_screenshots: create_screenshots,
            app_identifier: "online.opencloud.ios-app",
            skip_app_version_update: true,
            ipa: "OpenCloud-online.ipa"
          )
        end
    end
  end

  lane :opencloud_regular_build do
    build_ipa_in_house(
      ENTERPRISE_APP_ID: "eu.opencloud.ios",
      ENTERPRISE_APP_PROFILE: "match AppStore eu.opencloud.ios",
      ENTERPRISE_FP_ID: "eu.opencloud.ios.OpenCloud-File-Provider",
      ENTERPRISE_FP_PROFILE: "match AppStore eu.opencloud.ios.OpenCloud-File-Provider",
      ENTERPRISE_FP_UI_ID: "eu.opencloud.ios.OpenCloud-File-ProviderUI",
      ENTERPRISE_FP_UI_PROFILE: "match AppStore eu.opencloud.ios.OpenCloud-File-ProviderUI",
      ENTERPRISE_INTENT_ID: "eu.opencloud.ios.OpenCloud-Intents",
      ENTERPRISE_INTENT_PROFILE: "match AppStore eu.opencloud.ios.OpenCloud-Intents",
      ENTERPRISE_SHARE_EXTENSION_ID: "eu.opencloud.ios.OpenCloud-Share-Extension",
      ENTERPRISE_SHARE_EXTENSION_PROFILE: "match AppStore eu.opencloud.ios.OpenCloud-Share-Extension",
      ENTERPRISE_ACTION_EXTENSION_ID: "eu.opencloud.ios.OpenCloud-Action-Extension",
      ENTERPRISE_ACTION_EXTENSION_PROFILE: "match AppStore eu.opencloud.ios.OpenCloud-Action-Extension",
      ENTERPRISE_APP_FW_ID: "com.opencloud.OpenCloudApp",
      ENTERPRISE_TEAM: "8P6LQ2M542",
      ENTERPRISE_IDENTITY: "Apple Distribution: OpenCloud GmbH (8P6LQ2M542)",
      APP_GROUP_IDENTIFIERS: "group.eu.opencloud.ios",
      EXPORT_METHOD: "app-store",
      CONFIGURATION: "Release",
      BETA_APP_ICON: false,
      APP_NAME: "OpenCloud",
      URL_SCHEME: "opencloud-app",
      IPA_NAME: "OpenCloud-regular"
    )
  end

  lane :opencloud_emm_build do
    build_ipa_in_house(
      ENTERPRISE_APP_ID: "eu.opencloud.ios.emm",
      ENTERPRISE_APP_PROFILE: "match AppStore eu.opencloud.ios.emm",
      ENTERPRISE_FP_ID: "eu.opencloud.ios.emm.OpenCloud-File-Provider",
      ENTERPRISE_FP_PROFILE: "match AppStore eu.opencloud.ios.emm.OpenCloud-File-Provider",
      ENTERPRISE_FP_UI_ID: "eu.opencloud.ios.emm.OpenCloud-File-ProviderUI",
      ENTERPRISE_FP_UI_PROFILE: "match AppStore eu.opencloud.ios.emm.OpenCloud-File-ProviderUI",
      ENTERPRISE_INTENT_ID: "eu.opencloud.ios.emm.OpenCloud-Intents",
      ENTERPRISE_INTENT_PROFILE: "match AppStore eu.opencloud.ios.emm.OpenCloud-Intents",
      ENTERPRISE_SHARE_EXTENSION_ID: "eu.opencloud.ios.emm.OpenCloud-Share-Extension",
      ENTERPRISE_SHARE_EXTENSION_PROFILE: "match AppStore eu.opencloud.ios.emm.OpenCloud-Share-Extension",
      ENTERPRISE_ACTION_EXTENSION_ID: "eu.opencloud.ios.emm.OpenCloud-Action-Extension",
      ENTERPRISE_ACTION_EXTENSION_PROFILE: "match AppStore eu.opencloud.ios.emm.OpenCloud-Action-Extension",
      ENTERPRISE_APP_FW_ID: "com.opencloud.OpenCloudApp.emm",
      ENTERPRISE_TEAM: "8P6LQ2M542",
      ENTERPRISE_IDENTITY: "Apple Distribution: OpenCloud GmbH (8P6LQ2M542)",
      APP_GROUP_IDENTIFIERS: "group.eu.opencloud.ios.emm",
      EXPORT_METHOD: "app-store",
      CONFIGURATION: "Release",
      BETA_APP_ICON: false,
      APP_NAME: "OpenCloud EMM",
      URL_SCHEME: "opencloud-emm",
      IPA_NAME: "OpenCloud-emm"
    )
  end

lane :opencloud_online_build do
  build_ipa_in_house(
    ENTERPRISE_APP_ID: "online.opencloud.ios-app",
    ENTERPRISE_APP_PROFILE: "OpenCloud online AppStore",
    ENTERPRISE_FP_ID: "online.opencloud.ios-app.DocumentProvider",
    ENTERPRISE_FP_PROFILE: "OpenCloud online AppStore DocumentProvider",
    ENTERPRISE_FP_UI_ID: "online.opencloud.ios-app.DocumentProviderUI",
    ENTERPRISE_FP_UI_PROFILE: "OpenCloud online AppStore DocumentProviderUI",
    ENTERPRISE_INTENT_ID: "online.opencloud.ios-app.Intents",
    ENTERPRISE_INTENT_PROFILE: "OpenCloud online AppStore Intents",
    ENTERPRISE_SHARE_EXTENSION_ID: "online.opencloud.ios-app.ShareExtApp",
    ENTERPRISE_SHARE_EXTENSION_PROFILE: "OpenCloud online AppStore Share Ext",
    ENTERPRISE_ACTION_EXTENSION_ID: "online.opencloud.ios-app.Action-Extension",
    ENTERPRISE_ACTION_EXTENSION_PROFILE: "OpenCloud online AppStore Action Extension",
    ENTERPRISE_APP_FW_ID: "online.opencloud.ios-app.OpenCloudApp",
    ENTERPRISE_TEAM: "8P6LQ2M542",
    ENTERPRISE_IDENTITY: "Apple Distribution: OpenCloud GmbH",
    APP_GROUP_IDENTIFIERS: "group.online.opencloud.ios-app",
    EXPORT_METHOD: "app-store",
    CONFIGURATION: "Release",
    BETA_APP_ICON: false,
    APP_NAME: "OpenCloud Online",
    URL_SCHEME: "opencloud-online",
    IPA_NAME: "OpenCloud-online"
  )
end

  lane :opencloud_branding_adhoc_build do |values|
    build_ipa_in_house(
      ENTERPRISE_APP_ID: "eu.opencloud.ios",
      ENTERPRISE_APP_PROFILE: "Adhoc OpenCloud iOS App",
      ENTERPRISE_FP_ID: "eu.opencloud.ios.OpenCloud-File-Provider",
      ENTERPRISE_FP_PROFILE: "Adhoc OpenCloud iOS App File Provider",
      ENTERPRISE_FP_UI_ID: "eu.opencloud.ios.OpenCloud-File-ProviderUI",
      ENTERPRISE_FP_UI_PROFILE: "Adhoc OpenCloud iOS App File Provider UI",
      ENTERPRISE_INTENT_ID: "eu.opencloud.ios.OpenCloud-Intents",
      ENTERPRISE_INTENT_PROFILE: "Adhoc OpenCloud iOS App Intents",
      ENTERPRISE_SHARE_EXTENSION_ID: "eu.opencloud.ios.OpenCloud-Share-Extension",
      ENTERPRISE_SHARE_EXTENSION_PROFILE: "Adhoc OpenCloud iOS App Share Extension",
      ENTERPRISE_ACTION_EXTENSION_ID: "eu.opencloud.ios.OpenCloud-Action-Extension",
      ENTERPRISE_ACTION_EXTENSION_PROFILE: "Adhoc OpenCloud iOS App Action Extension",
      ENTERPRISE_APP_FW_ID: "com.opencloud.OpenCloudApp",
      ENTERPRISE_TEAM: "8P6LQ2M542",
      ENTERPRISE_IDENTITY: "Apple Distribution: OpenCloud GmbH",
      APP_GROUP_IDENTIFIERS: "group.eu.opencloud.ios",
      EXPORT_METHOD: "ad-hoc",
      CONFIGURATION: "Release",
      BETA_APP_ICON: false,
      BUILD_NUMBER: values[:BUILD_NUMBER]
    )
  end

  lane :opencloud_branding_appstore_build do |values|
    build_ipa_in_house(
      ENTERPRISE_APP_ID: "eu.opencloud.ios",
      ENTERPRISE_APP_PROFILE: "match AppStore eu.opencloud.ios",
      ENTERPRISE_FP_ID: "eu.opencloud.ios.OpenCloud-File-Provider",
      ENTERPRISE_FP_PROFILE: "match AppStore eu.opencloud.ios.OpenCloud-File-Provider",
      ENTERPRISE_FP_UI_ID: "eu.opencloud.ios.OpenCloud-File-ProviderUI",
      ENTERPRISE_FP_UI_PROFILE: "match AppStore eu.opencloud.ios.OpenCloud-File-ProviderUI",
      ENTERPRISE_INTENT_ID: "eu.opencloud.ios.OpenCloud-Intents",
      ENTERPRISE_INTENT_PROFILE: "match AppStore eu.opencloud.ios.OpenCloud-Intents",
      ENTERPRISE_SHARE_EXTENSION_ID: "eu.opencloud.ios.OpenCloud-Share-Extension",
      ENTERPRISE_SHARE_EXTENSION_PROFILE: "match AppStore eu.opencloud.ios.OpenCloud-Share-Extension",
      ENTERPRISE_ACTION_EXTENSION_ID: "eu.opencloud.ios.OpenCloud-Action-Extension",
      ENTERPRISE_ACTION_EXTENSION_PROFILE: "match AppStore eu.opencloud.ios.OpenCloud-Action-Extension",
      ENTERPRISE_APP_FW_ID: "com.opencloud.OpenCloudApp",
      ENTERPRISE_TEAM: "8P6LQ2M542",
      ENTERPRISE_IDENTITY: "Apple Distribution: OpenCloud GmbH (8P6LQ2M542)",
      APP_GROUP_IDENTIFIERS: "group.eu.opencloud.ios",
      EXPORT_METHOD: "app-store",
      CONFIGURATION: "Release",
      BETA_APP_ICON: false,
      BUILD_NUMBER: values[:BUILD_NUMBER]
    )
  end

  lane :opencloud_ownbrander_build do
    puts "ownBrander Build with Drone Build Number: " + ENV["DRONE_BUILD_NUMBER"]
    opencloud_branding_adhoc_build(
      BUILD_NUMBER: ENV["DRONE_BUILD_NUMBER"]
    )
    opencloud_branding_appstore_build(
      BUILD_NUMBER: ENV["DRONE_BUILD_NUMBER"]
    )
  end

  lane :opencloud_enterprise_build do
    build_ipa_in_house(
      ENTERPRISE_APP_ID: "eu.opencloud.ios",
      ENTERPRISE_APP_PROFILE: "Adhoc OpenCloud iOS App",
      ENTERPRISE_FP_ID: "eu.opencloud.ios.OpenCloud-File-Provider",
      ENTERPRISE_FP_PROFILE: "Adhoc OpenCloud iOS App File Provider",
      ENTERPRISE_FP_UI_ID: "eu.opencloud.ios.OpenCloud-File-ProviderUI",
      ENTERPRISE_FP_UI_PROFILE: "Adhoc OpenCloud iOS App File Provider UI",
      ENTERPRISE_INTENT_ID: "eu.opencloud.ios.OpenCloud-Intents",
      ENTERPRISE_INTENT_PROFILE: "Adhoc OpenCloud iOS App Intents",
      ENTERPRISE_SHARE_EXTENSION_ID: "eu.opencloud.ios.OpenCloud-Share-Extension",
      ENTERPRISE_SHARE_EXTENSION_PROFILE: "Adhoc OpenCloud iOS App Share Extension",
      ENTERPRISE_ACTION_EXTENSION_ID: "eu.opencloud.ios.OpenCloud-Action-Extension",
      ENTERPRISE_ACTION_EXTENSION_PROFILE: "Adhoc OpenCloud iOS App Action Extension",
      ENTERPRISE_APP_FW_ID: "com.opencloud.OpenCloudApp",
      ENTERPRISE_TEAM: "8P6LQ2M542",
      ENTERPRISE_IDENTITY: "iPhone Distribution: OpenCloud GmbH",
      APP_GROUP_IDENTIFIERS: "group.eu.opencloud.ios",
      EXPORT_METHOD: "ad-hoc",
      CONFIGURATION: "Debug",
      BETA_APP_ICON: true,
      APP_NAME: "OpenCloud",
      IPA_NAME: "OpenCloud"
    )
  end

  lane :generate_appicon do
  
    iconPath = "OpenCloud/Resources/Theming/branding-assets/"
    iconName = "branding-icon.png"  
    outputIconPath = "../OpenCloud/Resources/Assets.xcassets/"
    outputIconName = "AppIcon.appiconset"
    if File.exist?("../" + iconPath + iconName)
      sh("rm -rf " + outputIconPath + outputIconName + "/*")
      appicon(
        appicon_image_file: iconPath + iconName,
        appicon_devices: [:ipad, :iphone, :ios_marketing],
        appicon_path: "OpenCloud/Resources/Assets.xcassets/",
        appicon_name: outputIconName
      )
    end
  end

  desc "In-House Enterprise IPA generation"
   lane :build_ipa_in_house do |values|

    ENTERPRISE_APP_ID = values[:ENTERPRISE_APP_ID]
    ENTERPRISE_APP_PROFILE = values[:ENTERPRISE_APP_PROFILE]
    ENTERPRISE_FP_ID = values[:ENTERPRISE_FP_ID]
    ENTERPRISE_FP_PROFILE = values[:ENTERPRISE_FP_PROFILE]
    ENTERPRISE_FP_UI_ID = values[:ENTERPRISE_FP_UI_ID]
    ENTERPRISE_FP_UI_PROFILE = values[:ENTERPRISE_FP_UI_PROFILE]
    ENTERPRISE_INTENT_ID = values[:ENTERPRISE_INTENT_ID]
    ENTERPRISE_INTENT_PROFILE = values[:ENTERPRISE_INTENT_PROFILE]
    ENTERPRISE_SHARE_EXTENSION_ID = values[:ENTERPRISE_SHARE_EXTENSION_ID]
    ENTERPRISE_SHARE_EXTENSION_PROFILE = values[:ENTERPRISE_SHARE_EXTENSION_PROFILE]
    ENTERPRISE_ACTION_EXTENSION_ID = values[:ENTERPRISE_ACTION_EXTENSION_ID]
    ENTERPRISE_ACTION_EXTENSION_PROFILE = values[:ENTERPRISE_ACTION_EXTENSION_PROFILE]
    ENTERPRISE_APP_FW_ID = values[:ENTERPRISE_APP_FW_ID]
    ENTERPRISE_APP_SHARED_ID = "com.opencloud.OpenCloudAppShared"
    ENTERPRISE_TEAM = values[:ENTERPRISE_TEAM]
    ENTERPRISE_IDENTITY = values[:ENTERPRISE_IDENTITY]
    APP_GROUP_IDENTIFIERS = values[:APP_GROUP_IDENTIFIERS]
    OC_APP_GROUP_IDENTIFIERS = values[:APP_GROUP_IDENTIFIERS]
    EXPORT_METHOD = values[:EXPORT_METHOD]
    CONFIGURATION = values[:CONFIGURATION]
    BUILD_NUMBER = values[:BUILD_NUMBER]

    # Check if Xcode version matches the required (as in .xcode-version defined)
    xcode_version_paths = "../.xcode-version"
    if File.exist?(xcode_version_paths)
      required_version = File.read(xcode_version_paths).strip
      puts "Found required Xcode version: " + required_version
      ensure_xcode_version(version: required_version)
    end

    appName = "OpenCloud"
    appBuildFlags = ""
    appCustomAppScheme = ""
    appCustomAuthScheme = ""
    themeFolder = "OpenCloud/Resources/Theming/"
    themePath = themeFolder + "Branding.plist"
    if !values[:APP_NAME].nil?
      appName = values[:APP_NAME]
    elsif File.exist?("../" + themePath)
      tmpAppName = get_info_plist_value(path: themePath, key: "branding.organization-name")
      if tmpAppName && !tmpAppName.empty?
        appName = tmpAppName
      end
    end

    gitbranch = sh "git rev-parse --abbrev-ref HEAD"
    sdkgitbranch = sh "git -C ../ios-sdk/ rev-parse --abbrev-ref HEAD"
    puts "App Git Branch: " + gitbranch
    puts "SDK Git Branch: " + sdkgitbranch
    if File.exist?("../" + themePath)
      # Extract from Branding.plist
      tmpAppBuildFlags = get_info_plist_value(path: themePath, key: "build.flags")
      if tmpAppBuildFlags && !tmpAppBuildFlags.empty?
        appBuildFlags = tmpAppBuildFlags
      end

      tmpAppCustomAppScheme = get_info_plist_value(path: themePath, key: "build.custom-app-scheme")
      if tmpAppCustomAppScheme && !tmpAppCustomAppScheme.empty?
        appCustomAppScheme = tmpAppCustomAppScheme
      end

      tmpAuthCustomAuthScheme = get_info_plist_value(path: themePath, key: "build.custom-auth-scheme")
      if tmpAuthCustomAuthScheme && !tmpAuthCustomAuthScheme.empty?
        appCustomAuthScheme = tmpAuthCustomAuthScheme
      end

      # Fallback (legacy key name support)
      tmpAppBuildFlags = get_info_plist_value(path: themePath, key: "app.build-flags")
      if tmpAppBuildFlags && !tmpAppBuildFlags.empty?
        appBuildFlags = tmpAppBuildFlags
      end

      tmpAppCustomAppScheme = get_info_plist_value(path: themePath, key: "app.custom-app-scheme")
      if tmpAppCustomAppScheme && !tmpAppCustomAppScheme.empty?
        appCustomAppScheme = tmpAppCustomAppScheme
      end

      tmpAuthCustomAuthScheme = get_info_plist_value(path: themePath, key: "app.custom-auth-scheme")
      if tmpAuthCustomAuthScheme && !tmpAuthCustomAuthScheme.empty?
        appCustomAuthScheme = tmpAuthCustomAuthScheme
      end

      # Set the Git commit hash for the ios-app and ios-sdk repository into the Branding.plist
      commit = sh "git rev-parse --short HEAD"
      sdkcommit = sh "git -C ../ios-sdk/ rev-parse --short HEAD"

      puts "App Git Hash: " + commit
      puts "SDK Git Hash: " + sdkcommit
      set_info_plist_value(path: themePath, key: "GitHash", value: commit)
      set_info_plist_value(path: themePath, key: "SDKGitHash", value: sdkcommit)
      set_info_plist_value(path: themePath, key: "GitBranch", value: gitbranch)
      set_info_plist_value(path: themePath, key: "SDKGitBranch", value: sdkgitbranch)
    end

    puts "App Name: " + appName
    puts "App Build Flags: " + appBuildFlags
    puts "Custom App Scheme: " + appCustomAppScheme
    puts "Custom Auth Scheme: " + appCustomAuthScheme

    # Special handling for app build flag DISABLE_BACKGROUND_LOCATION needed:
    # calls to set_info_plist_value before building with xcodebuild
    # strip preprocessor instructions from Info.plist, so that the
    # Location keys they aim to remove stay in place. Working around this
    # by removing anything between "#ifndef DISABLE_BACKGROUND_LOCATION"
    # and "#endif" via sed
    if appBuildFlags.include? "DISABLE_BACKGROUND_LOCATION"
        sh "sed '/#ifndef DISABLE_BACKGROUND_LOCATION/,/#endif/d' ../OpenCloud/Resources/Info.plist >../OpenCloud/Resources/Info.plist.mod"
        sh "mv ../OpenCloud/Resources/Info.plist.mod ../OpenCloud/Resources/Info.plist"
    end

    # Special handling for app build flag DISABLE_PLAIN_HTTP (see above why this is needed)
    if appBuildFlags.include? "DISABLE_PLAIN_HTTP"
        sh "sed '/#ifndef DISABLE_PLAIN_HTTP/,/#endif/d' ../OpenCloud/Resources/Info.plist >../OpenCloud/Resources/Info.plist.mod"
        sh "mv ../OpenCloud/Resources/Info.plist.mod ../OpenCloud/Resources/Info.plist"
    end

	# update_url_schemes can't seem to reach the second URL scheme ("oc") for authentication
	# so using sed and a XML property instead
    if !appCustomAppScheme.empty?
        sh 'sed "s#<string octype=\"app\">opencloud</string>#<string>' + appCustomAppScheme + '</string>#" ../OpenCloud/Resources/Info.plist >../OpenCloud/Resources/Info.plist.mod'
        sh "mv ../OpenCloud/Resources/Info.plist.mod ../OpenCloud/Resources/Info.plist"
    end

    if !appCustomAuthScheme.empty?
        sh 'sed "s#<string octype=\"auth\">oc</string>#<string>' + appCustomAuthScheme + '</string>#" ../OpenCloud/Resources/Info.plist >../OpenCloud/Resources/Info.plist.mod'
        sh "mv ../OpenCloud/Resources/Info.plist.mod ../OpenCloud/Resources/Info.plist"
    end

    set_info_plist_value(path: "OpenCloud/Resources/Info.plist", key: "CFBundleDisplayName", value: appName)
    set_info_plist_value(path: "OpenCloud/Resources/Info.plist", key: "CFBundleName", value: appName)

    # Check, if Branding.plist file exists and handle custom set values
    if File.exist?("../" + themePath)
      # Check for custom app version number
        tmpCustomAppVersionNumber = get_info_plist_value(path: themePath, key: "build.version-number")
        if tmpCustomAppVersionNumber && !tmpCustomAppVersionNumber.empty?
          customAppVersionNumber = tmpCustomAppVersionNumber

          puts "Set Version Number from Branding.plist: " + customAppVersionNumber
          set_info_plist_value(path: "OpenCloud/Resources/Info.plist", key: "CFBundleShortVersionString", value: customAppVersionNumber)
          set_info_plist_value(path: "OpenCloud File Provider/Info.plist", key: "CFBundleShortVersionString", value: customAppVersionNumber)
          set_info_plist_value(path: "OpenCloud File Provider UI/Info.plist", key: "CFBundleShortVersionString", value: customAppVersionNumber)
          set_info_plist_value(path: "OpenCloud Share Extension/Info.plist", key: "CFBundleShortVersionString", value: customAppVersionNumber)
          set_info_plist_value(path: "OpenCloud Action Extension/Info.plist", key: "CFBundleShortVersionString", value: customAppVersionNumber)
          set_info_plist_value(path: "OpenCloud Intents/Info.plist", key: "CFBundleShortVersionString", value: customAppVersionNumber)
        end

        # Check for custom app group identifier
        tmpAPP_GROUP_IDENTIFIERS = get_info_plist_value(path: themePath, key: "build.app-group-identifier")
        if tmpAPP_GROUP_IDENTIFIERS && !tmpAPP_GROUP_IDENTIFIERS.empty?
          APP_GROUP_IDENTIFIERS = tmpAPP_GROUP_IDENTIFIERS
          OC_APP_GROUP_IDENTIFIERS = tmpAPP_GROUP_IDENTIFIERS
        end

        # Check for custom OC app group identifier
        tmpOC_APP_GROUP_IDENTIFIERS = get_info_plist_value(path: themePath, key: "build.oc-app-group-identifier")
        if tmpOC_APP_GROUP_IDENTIFIERS && !tmpOC_APP_GROUP_IDENTIFIERS.empty?
          OC_APP_GROUP_IDENTIFIERS = tmpOC_APP_GROUP_IDENTIFIERS
        end
    end

    if !values[:BUILD_NUMBER].nil?
      puts "Set Drone Build Number: " + BUILD_NUMBER
      set_info_plist_value(path: "OpenCloud/Resources/Info.plist", key: "CFBundleVersion", value: BUILD_NUMBER)
      set_info_plist_value(path: "OpenCloud File Provider/Info.plist", key: "CFBundleVersion", value: BUILD_NUMBER)
      set_info_plist_value(path: "OpenCloud File Provider UI/Info.plist", key: "CFBundleVersion", value: BUILD_NUMBER)
      set_info_plist_value(path: "OpenCloud Share Extension/Info.plist", key: "CFBundleVersion", value: BUILD_NUMBER)
      set_info_plist_value(path: "OpenCloud Action Extension/Info.plist", key: "CFBundleVersion", value: BUILD_NUMBER)
      set_info_plist_value(path: "OpenCloud Intents/Info.plist", key: "CFBundleVersion", value: BUILD_NUMBER)
    end

    if !values[:URL_SCHEME].nil?
      update_url_schemes(
        path: "OpenCloud/Resources/Info.plist",
        update_url_schemes: proc do |schemes|
          schemes + [values[:URL_SCHEME]]
        end
      )
    end

    set_info_plist_value(path: "OpenCloud File Provider/Info.plist", key: "CFBundleDisplayName", value: appName)
    set_info_plist_value(path: "OpenCloud File Provider/Info.plist", key: "CFBundleName", value: appName)

    set_info_plist_value(path: "OpenCloud File Provider UI/Info.plist", key: "CFBundleDisplayName", value: appName)
    set_info_plist_value(path: "OpenCloud File Provider UI/Info.plist", key: "CFBundleName", value: appName)

    set_info_plist_value(path: "OpenCloud Share Extension/Info.plist", key: "CFBundleDisplayName", value: "Share to " + appName)
    set_info_plist_value(path: "OpenCloud Share Extension/Info.plist", key: "CFBundleName", value: appName)

    set_info_plist_value(path: "OpenCloud Action Extension/Info.plist", key: "CFBundleDisplayName", value: "Save to " + appName)
    set_info_plist_value(path: "OpenCloud Action Extension/Info.plist", key: "CFBundleName", value: appName)
    
    # Read InfoPlist.xcstrings JSON content from the file
    json_file_path = "../OpenCloud Action Extension/InfoPlist.xcstrings"
    json_content = File.read(json_file_path)
    json_data = JSON.parse(json_content)
    
    # Update the CFBundleDisplayName value for all localizations
    if json_data["strings"] && json_data["strings"]["CFBundleDisplayName"]
        UI.message("CFBundleDisplayName key found, updating values...")
        
        json_data["strings"]["CFBundleDisplayName"]["localizations"].each do |locale, localization_data|
          old_value = localization_data["stringUnit"]["value"]
          
          # Replace "OpenCloud" with appName
          new_value = old_value.gsub("OpenCloud", appName)
          localization_data["stringUnit"]["value"] = new_value
        end
      else
        UI.error("CFBundleDisplayName key not found in the JSON data!")
      end
    
    # Write the updated JSON back to the file
    File.open(json_file_path, "w") do |f|
      f.write(JSON.pretty_generate(json_data))
    end

    update_app_identifier(
      xcodeproj: "OpenCloud.xcodeproj",
      plist_path: "OpenCloud/Resources/Info.plist",
      app_identifier: ENTERPRISE_APP_ID
    )

    update_app_identifier(
      xcodeproj: "OpenCloud.xcodeproj",
      plist_path: "OpenCloud File Provider/Info.plist",
      app_identifier: ENTERPRISE_FP_ID
    )

    update_app_identifier(
      xcodeproj: "OpenCloud.xcodeproj",
      plist_path: "OpenCloud File Provider UI/Info.plist",
      app_identifier: ENTERPRISE_FP_UI_ID
    )

    update_app_identifier(
      xcodeproj: "OpenCloud.xcodeproj",
      plist_path: "OpenCloudAppFramework/Resources/Info.plist",
      app_identifier: ENTERPRISE_APP_FW_ID
    )

    update_app_identifier(
      xcodeproj: "OpenCloud.xcodeproj",
      plist_path: "OpenCloud Intents/Info.plist",
      app_identifier: ENTERPRISE_INTENT_ID
    )

    update_app_identifier(
      xcodeproj: "OpenCloud.xcodeproj",
      plist_path: "OpenCloud Share Extension/Info.plist",
      app_identifier: ENTERPRISE_SHARE_EXTENSION_ID
    )

    update_app_identifier(
      xcodeproj: "OpenCloud.xcodeproj",
      plist_path: "OpenCloud Action Extension/Info.plist",
      app_identifier: ENTERPRISE_ACTION_EXTENSION_ID
    )

    update_app_group_identifiers(
      entitlements_file: "OpenCloud/OpenCloud.entitlements",
      app_group_identifiers: [APP_GROUP_IDENTIFIERS]
    )
    update_keychain_access_groups(
      entitlements_file: "OpenCloud/OpenCloud.entitlements",
      identifiers: [ENTERPRISE_TEAM + "." + APP_GROUP_IDENTIFIERS]
	)

    update_app_group_identifiers(
      entitlements_file: "OpenCloud File Provider/OpenCloud_File_Provider.entitlements",
      app_group_identifiers: [APP_GROUP_IDENTIFIERS]
    )
    update_keychain_access_groups(
      entitlements_file: "OpenCloud File Provider/OpenCloud_File_Provider.entitlements",
      identifiers: [ENTERPRISE_TEAM + "." + APP_GROUP_IDENTIFIERS]
	)

    update_app_group_identifiers(
      entitlements_file: "OpenCloud File Provider UI/OpenCloud_File_Provider_UI.entitlements",
      app_group_identifiers: [APP_GROUP_IDENTIFIERS]
    )
    update_keychain_access_groups(
      entitlements_file: "OpenCloud File Provider UI/OpenCloud_File_Provider_UI.entitlements",
      identifiers: [ENTERPRISE_TEAM + "." + APP_GROUP_IDENTIFIERS]
	)

    update_app_group_identifiers(
      entitlements_file: "OpenCloud Intents/OpenCloud Intents.entitlements",
      app_group_identifiers: [APP_GROUP_IDENTIFIERS]
    )
    update_keychain_access_groups(
      entitlements_file: "OpenCloud Intents/OpenCloud Intents.entitlements",
      identifiers: [ENTERPRISE_TEAM + "." + APP_GROUP_IDENTIFIERS]
	)

    update_app_group_identifiers(
      entitlements_file: "OpenCloud Share Extension/OpenCloud Share Extension.entitlements",
      app_group_identifiers: [APP_GROUP_IDENTIFIERS]
    )
    update_keychain_access_groups(
      entitlements_file: "OpenCloud Share Extension/OpenCloud Share Extension.entitlements",
      identifiers: [ENTERPRISE_TEAM + "." + APP_GROUP_IDENTIFIERS]
	)

    update_app_group_identifiers(
      entitlements_file: "OpenCloud Action Extension/OpenCloud Action Extension.entitlements",
      app_group_identifiers: [APP_GROUP_IDENTIFIERS]
    )
    update_keychain_access_groups(
      entitlements_file: "OpenCloud Action Extension/OpenCloud Action Extension.entitlements",
      identifiers: [ENTERPRISE_TEAM + "." + APP_GROUP_IDENTIFIERS]
	)

    set_info_plist_value(path: "OpenCloud File Provider/Info.plist", key: "OCAppGroupIdentifier", value: OC_APP_GROUP_IDENTIFIERS)
    set_info_plist_value(path: "OpenCloud File Provider/Info.plist", key: "OCKeychainAccessGroupIdentifier", value: OC_APP_GROUP_IDENTIFIERS)
    set_info_plist_value(path: "OpenCloud File Provider/Info.plist", key: "NSExtension", subkey: "NSExtensionFileProviderDocumentGroup", value: APP_GROUP_IDENTIFIERS)
    set_info_plist_value(path: "OpenCloud File Provider UI/Info.plist", key: "OCAppGroupIdentifier", value: OC_APP_GROUP_IDENTIFIERS)
    set_info_plist_value(path: "OpenCloud File Provider UI/Info.plist", key: "OCKeychainAccessGroupIdentifier", value: OC_APP_GROUP_IDENTIFIERS)
    set_info_plist_value(path: "OpenCloud Intents/Info.plist", key: "OCAppGroupIdentifier", value: OC_APP_GROUP_IDENTIFIERS)
    set_info_plist_value(path: "OpenCloud Intents/Info.plist", key: "OCKeychainAccessGroupIdentifier", value: OC_APP_GROUP_IDENTIFIERS)
    set_info_plist_value(path: "OpenCloud Share Extension/Info.plist", key: "OCAppGroupIdentifier", value: OC_APP_GROUP_IDENTIFIERS)
    set_info_plist_value(path: "OpenCloud Share Extension/Info.plist", key: "OCKeychainAccessGroupIdentifier", value: OC_APP_GROUP_IDENTIFIERS)
    set_info_plist_value(path: "OpenCloud Action Extension/Info.plist", key: "OCAppGroupIdentifier", value: OC_APP_GROUP_IDENTIFIERS)
    set_info_plist_value(path: "OpenCloud Action Extension/Info.plist", key: "OCKeychainAccessGroupIdentifier", value: OC_APP_GROUP_IDENTIFIERS)
    set_info_plist_value(path: "OpenCloud/Resources/Info.plist", key: "OCAppGroupIdentifier", value: OC_APP_GROUP_IDENTIFIERS)
    set_info_plist_value(path: "OpenCloud/Resources/Info.plist", key: "OCKeychainAccessGroupIdentifier", value: OC_APP_GROUP_IDENTIFIERS)

    automatic_code_signing(
      path: "OpenCloud.xcodeproj",
      use_automatic_signing: false,
      team_id: ENTERPRISE_TEAM,
      code_sign_identity: ENTERPRISE_IDENTITY,
      profile_name: ENTERPRISE_APP_PROFILE,
      bundle_identifier: ENTERPRISE_APP_ID,
      targets: ["OpenCloud"]
    )

    automatic_code_signing(
      path: "OpenCloud.xcodeproj",
      use_automatic_signing: false,
      team_id: ENTERPRISE_TEAM,
      code_sign_identity: ENTERPRISE_IDENTITY,
      profile_name: ENTERPRISE_FP_PROFILE,
      bundle_identifier: ENTERPRISE_FP_ID,
      targets: ["OpenCloud File Provider"]
    )

    automatic_code_signing(
      path: "OpenCloud.xcodeproj",
      use_automatic_signing: false,
      team_id: ENTERPRISE_TEAM,
      code_sign_identity: ENTERPRISE_IDENTITY,
      profile_name: ENTERPRISE_FP_UI_PROFILE,
      bundle_identifier: ENTERPRISE_FP_UI_ID,
      targets: ["OpenCloud File Provider UI"]
    )

    automatic_code_signing(
      path: "OpenCloud.xcodeproj",
      use_automatic_signing: false,
      team_id: ENTERPRISE_TEAM,
      code_sign_identity: ENTERPRISE_IDENTITY,
      profile_name: ENTERPRISE_INTENT_PROFILE,
      bundle_identifier: ENTERPRISE_INTENT_ID,
      targets: ["OpenCloud Intents"]
    )

    automatic_code_signing(
      path: "OpenCloud.xcodeproj",
      use_automatic_signing: false,
      team_id: ENTERPRISE_TEAM,
      code_sign_identity: ENTERPRISE_IDENTITY,
      bundle_identifier: ENTERPRISE_APP_FW_ID,
      targets: ["OpenCloudApp"]
    )

    automatic_code_signing(
      path: "OpenCloud.xcodeproj",
      use_automatic_signing: false,
      team_id: ENTERPRISE_TEAM,
      code_sign_identity: ENTERPRISE_IDENTITY,
      profile_name: ENTERPRISE_SHARE_EXTENSION_PROFILE,
      bundle_identifier: ENTERPRISE_SHARE_EXTENSION_ID,
      targets: ["OpenCloud Share Extension"]
    )

    automatic_code_signing(
      path: "OpenCloud.xcodeproj",
      use_automatic_signing: false,
      team_id: ENTERPRISE_TEAM,
      code_sign_identity: ENTERPRISE_IDENTITY,
      profile_name: ENTERPRISE_ACTION_EXTENSION_PROFILE,
      bundle_identifier: ENTERPRISE_ACTION_EXTENSION_ID,
      targets: ["OpenCloud Action Extension"]
    )

    automatic_code_signing(
      path: "OpenCloud.xcodeproj",
      use_automatic_signing: false,
      team_id: ENTERPRISE_TEAM,
      code_sign_identity: ENTERPRISE_IDENTITY,
      bundle_identifier: ENTERPRISE_APP_SHARED_ID,
      targets: ["OpenCloudAppShared"]
    )

    # Add a badge with the latest short commit hash to the app icon
    build_number = app_version(
      xcodeproj: "OpenCloud.xcodeproj",
      version_key: "APP_VERSION"
    )

    version = app_version(
      xcodeproj: "OpenCloud.xcodeproj",
      version_key: "APP_SHORT_VERSION"
    )


      time = Time.now
      ipaSuffix = EXPORT_METHOD + "-" + time.strftime("%Y%m%d-%k%M")
      if !customAppVersionNumber.nil?
        version = customAppVersionNumber
      end
      if !values[:BUILD_NUMBER].nil?
        version += "." + BUILD_NUMBER
      end

      if !values[:IPA_NAME].nil?
        ipaName = values[:IPA_NAME] + "-" + version + "-" + gitbranch.strip + "-" + ipaSuffix + ".ipa"
      elsif
        ipaName = appName + "-" + version + "-" + ipaSuffix + ".ipa"
      end

      if File.exist?("../" + themePath)
        # Copy the Branding.plist file with additional app and build informtion in the file name
        sh "cp " + "\"../" + themePath + "\" \"../" + themeFolder + appName + "-" + version + "-" + ipaSuffix + ".plist\""
      end

    generate_appicon()

    if values[:BETA_APP_ICON]
      commit = last_git_commit
      short_hash = commit[:abbreviated_commit_hash] # short sha of commit
      sh "brew install librsvg"
      sh "sed -e \"s/\#version#/" + version + "/\" -e \"s/\#githash#/" + short_hash + "/\" badge.svg > badge_tmp.svg"
      sh "rsvg-convert badge_tmp.svg > badge.png"
      add_badge(custom: "fastlane/badge.png")
    end

    #Create the build
    build_app(
      project: "OpenCloud.xcodeproj",
      scheme: "OpenCloud",
      configuration: CONFIGURATION,
      codesigning_identity: ENTERPRISE_IDENTITY,
      output_name: ipaName,
      export_method: EXPORT_METHOD,
      xcargs: "CODE_SIGN_STYLE=Manual APP_BUILD_FLAGS='" + appBuildFlags + "'",
      export_options: {
        method: EXPORT_METHOD,
        provisioningProfiles: {
          ENTERPRISE_APP_ID => ENTERPRISE_APP_PROFILE,
	        ENTERPRISE_FP_ID => ENTERPRISE_FP_PROFILE,
	        ENTERPRISE_INTENT_ID => ENTERPRISE_INTENT_PROFILE,
	        ENTERPRISE_SHARE_EXTENSION_ID => ENTERPRISE_SHARE_EXTENSION_PROFILE,
	        ENTERPRISE_ACTION_EXTENSION_ID => ENTERPRISE_ACTION_EXTENSION_PROFILE
        }
      }
    )
    
    
    
    if appBuildFlags.include? "REMOVE_EXTENSION_INTENTS"
        sh "../removeExtension.sh \"../" + ipaName.gsub("/", "_") + "\" \"OpenCloud Intents\""
    end

  end
end
